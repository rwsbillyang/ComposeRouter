plugins {
    alias libs.plugins.kotlin.android
    alias libs.plugins.android.library
    id 'maven-publish'
}

android {
    namespace 'com.github.rwsbillyang.composerouter'
    compileSdk libs.versions.compileSdkVersion.get().toInteger() //kts: toInt()

    defaultConfig {
        minSdk 21
        targetSdk libs.versions.targetSdkVersion.get().toInteger() //kts: toInt()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.composeVersion.get()
    }
}

dependencies {
    implementation libs.androidx.core.ktx
    implementation libs.androidx.compose.runtime
    implementation libs.androidx.compose.foundation

    compileOnly libs.androidx.compose.ui
    compileOnly libs.androidx.activity.compose //RoutableActivity
    compileOnly libs.androidx.compose.material // SimpleNavLayout
    compileOnly libs.androidx.compose.material3
    compileOnly libs.androidx.compose.material3.window.sizeclass
}


//增加上传源码的task Reason: Task ':lib:generateMetadataFileForMavenPublication' uses this output of task ':lib:sourceJar' without declaring an explicit or implicit dependency. This can lead to incorrect results being produced, depending on what order the tasks are executed.
//    Possible solutions:
//      1. Declare task ':lib:sourceJar' as an input of ':lib:generateMetadataFileForMavenPublication'.
//      2. Declare an explicit dependency on ':lib:sourceJar' from ':lib:generateMetadataFileForMavenPublication' using Task#dependsOn.
//      3. Declare an explicit dependency on ':lib:sourceJar' from ':lib:generateMetadataFileForMavenPublication' using Task#mustRunAfter.
//task sourceJar(type: Jar) {
//    from android.sourceSets.main.java.getSrcDirs() // 源码路径
//    archiveClassifier = "sources"
//}

// gradle assembleRelease
// gradle publishToMavenLocal
//https://developer.android.google.cn/studio/build/maven-publish-plugin?hl=zh-cn
// Because the components are created only during the afterEvaluate phase, you must
// configure your publications using the afterEvaluate() lifecycle method.
afterEvaluate {
    publishing {
        // 配置maven 仓库
        repositories { RepositoryHandler handler ->
            handler.mavenLocal()
        }
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                // Applies the component for the release build variant.
                from components.release

                // You can then customize attributes of the publication as shown below.
                groupId = "com.github.rwsbillyang"
                artifactId = "composerouter"
                version = libs.versions.composerouterVersion.get()
            }
            // Creates a Maven publication called “debug”.
//            debug(MavenPublication) {
//                // Applies the component for the debug build variant.
//                from components.debug
//
//                groupId = 'com.example.MyLibrary'
//                artifactId = 'final-debug'
//                version = '1.0'
            }
        }
    }